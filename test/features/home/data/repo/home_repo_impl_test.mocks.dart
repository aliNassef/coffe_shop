// Mocks generated by Mockito 5.4.6 from annotations
// in coffe_shop/test/features/home/data/repo/home_repo_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:coffe_shop/core/helpers/firestore_helper.dart' as _i2;
import 'package:coffe_shop/core/helpers/location_helper.dart' as _i6;
import 'package:coffe_shop/features/home/data/model/coffe_model.dart' as _i5;
import 'package:coffe_shop/features/order/data/models/order_model.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FirestoreHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreHelper extends _i1.Mock implements _i2.FirestoreHelper {
  MockFirestoreHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> addOrder(_i4.OrderModel? order) =>
      (super.noSuchMethod(
            Invocation.method(#addOrder, [order]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i4.OrderModel?> getOrderById(String? orderId) =>
      (super.noSuchMethod(
            Invocation.method(#getOrderById, [orderId]),
            returnValue: _i3.Future<_i4.OrderModel?>.value(),
          )
          as _i3.Future<_i4.OrderModel?>);

  @override
  _i3.Future<List<_i4.OrderModel>> getAllOrders() =>
      (super.noSuchMethod(
            Invocation.method(#getAllOrders, []),
            returnValue: _i3.Future<List<_i4.OrderModel>>.value(
              <_i4.OrderModel>[],
            ),
          )
          as _i3.Future<List<_i4.OrderModel>>);

  @override
  _i3.Future<_i5.CoffeeModel?> getCoffeeById(String? coffeeId) =>
      (super.noSuchMethod(
            Invocation.method(#getCoffeeById, [coffeeId]),
            returnValue: _i3.Future<_i5.CoffeeModel?>.value(),
          )
          as _i3.Future<_i5.CoffeeModel?>);

  @override
  _i3.Future<List<_i5.CoffeeModel>> getAllCoffees() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCoffees, []),
            returnValue: _i3.Future<List<_i5.CoffeeModel>>.value(
              <_i5.CoffeeModel>[],
            ),
          )
          as _i3.Future<List<_i5.CoffeeModel>>);

  @override
  _i3.Future<List<_i5.CoffeeModel>> searchCoffees(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchCoffees, [query]),
            returnValue: _i3.Future<List<_i5.CoffeeModel>>.value(
              <_i5.CoffeeModel>[],
            ),
          )
          as _i3.Future<List<_i5.CoffeeModel>>);
}

/// A class which mocks [LocationHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationHelper extends _i1.Mock implements _i6.LocationHelper {
  MockLocationHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> getCurrentLocation() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentLocation, []),
            returnValue: _i3.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#getCurrentLocation, []),
              ),
            ),
          )
          as _i3.Future<String>);
}
