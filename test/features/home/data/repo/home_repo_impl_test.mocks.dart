// Mocks generated by Mockito 5.4.6 from annotations
// in coffe_shop/test/features/home/data/repo/home_repo_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:coffe_shop/core/helpers/firestore_helper.dart' as _i3;
import 'package:coffe_shop/core/helpers/location_helper.dart' as _i9;
import 'package:coffe_shop/features/auth/data/models/user_model.dart' as _i8;
import 'package:coffe_shop/features/delevery/data/model/deleivery_model.dart'
    as _i7;
import 'package:coffe_shop/features/home/data/model/coffe_model.dart' as _i6;
import 'package:coffe_shop/features/order/data/models/order_model.dart' as _i5;
import 'package:geolocator/geolocator.dart' as _i2;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePosition_0 extends _i1.SmartFake implements _i2.Position {
  _FakePosition_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FirestoreHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreHelper extends _i1.Mock implements _i3.FirestoreHelper {
  MockFirestoreHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addOrder(_i5.OrderModel? order) =>
      (super.noSuchMethod(
            Invocation.method(#addOrder, [order]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i5.OrderModel?> getOrderById(String? orderId) =>
      (super.noSuchMethod(
            Invocation.method(#getOrderById, [orderId]),
            returnValue: _i4.Future<_i5.OrderModel?>.value(),
          )
          as _i4.Future<_i5.OrderModel?>);

  @override
  _i4.Future<List<_i5.OrderModel>> getAllOrders() =>
      (super.noSuchMethod(
            Invocation.method(#getAllOrders, []),
            returnValue: _i4.Future<List<_i5.OrderModel>>.value(
              <_i5.OrderModel>[],
            ),
          )
          as _i4.Future<List<_i5.OrderModel>>);

  @override
  _i4.Future<_i6.CoffeeModel?> getCoffeeById(String? coffeeId) =>
      (super.noSuchMethod(
            Invocation.method(#getCoffeeById, [coffeeId]),
            returnValue: _i4.Future<_i6.CoffeeModel?>.value(),
          )
          as _i4.Future<_i6.CoffeeModel?>);

  @override
  _i4.Future<List<_i6.CoffeeModel>> getAllCoffees() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCoffees, []),
            returnValue: _i4.Future<List<_i6.CoffeeModel>>.value(
              <_i6.CoffeeModel>[],
            ),
          )
          as _i4.Future<List<_i6.CoffeeModel>>);

  @override
  _i4.Future<List<_i6.CoffeeModel>> searchCoffees(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchCoffees, [query]),
            returnValue: _i4.Future<List<_i6.CoffeeModel>>.value(
              <_i6.CoffeeModel>[],
            ),
          )
          as _i4.Future<List<_i6.CoffeeModel>>);

  @override
  _i4.Stream<List<_i5.OrderModel>> getOrdersStream() =>
      (super.noSuchMethod(
            Invocation.method(#getOrdersStream, []),
            returnValue: _i4.Stream<List<_i5.OrderModel>>.empty(),
          )
          as _i4.Stream<List<_i5.OrderModel>>);

  @override
  _i4.Future<void> acceptOrder({
    required _i7.DeleiveryModel? deleveryModel,
    required String? orderId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#acceptOrder, [], {
              #deleveryModel: deleveryModel,
              #orderId: orderId,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> changeOrderStatus({
    required String? orderId,
    required String? status,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#changeOrderStatus, [], {
              #orderId: orderId,
              #status: status,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateDeliveryLatLong(
    double? lat,
    double? long,
    String? orderId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateDeliveryLatLong, [lat, long, orderId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addUser(_i8.UserModel? user) =>
      (super.noSuchMethod(
            Invocation.method(#addUser, [user]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i8.UserModel?> getUserById(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserById, [userId]),
            returnValue: _i4.Future<_i8.UserModel?>.value(),
          )
          as _i4.Future<_i8.UserModel?>);
}

/// A class which mocks [LocationHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationHelper extends _i1.Mock implements _i9.LocationHelper {
  MockLocationHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Position> getUserCoardinates() =>
      (super.noSuchMethod(
            Invocation.method(#getUserCoardinates, []),
            returnValue: _i4.Future<_i2.Position>.value(
              _FakePosition_0(this, Invocation.method(#getUserCoardinates, [])),
            ),
          )
          as _i4.Future<_i2.Position>);

  @override
  _i4.Future<String> getCurrentLocation() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentLocation, []),
            returnValue: _i4.Future<String>.value(
              _i10.dummyValue<String>(
                this,
                Invocation.method(#getCurrentLocation, []),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Stream<_i2.Position> getPositionStream() =>
      (super.noSuchMethod(
            Invocation.method(#getPositionStream, []),
            returnValue: _i4.Stream<_i2.Position>.empty(),
          )
          as _i4.Stream<_i2.Position>);

  @override
  double getDiffDistance(
    double? lat1,
    double? long1,
    double? lat2,
    double? long2,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getDiffDistance, [lat1, long1, lat2, long2]),
            returnValue: 0.0,
          )
          as double);

  @override
  _i4.Future<Set<_i11.Polyline>> getPolylineCoordinates({
    required _i11.LatLng? start,
    required _i11.LatLng? end,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPolylineCoordinates, [], {
              #start: start,
              #end: end,
            }),
            returnValue: _i4.Future<Set<_i11.Polyline>>.value(
              <_i11.Polyline>{},
            ),
          )
          as _i4.Future<Set<_i11.Polyline>>);

  @override
  Set<_i11.Polyline> buildPolylineSet(
    List<_i11.LatLng>? polylineCoordinates, {
    String? polylineId = 'route',
    int? width = 5,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #buildPolylineSet,
              [polylineCoordinates],
              {#polylineId: polylineId, #width: width},
            ),
            returnValue: <_i11.Polyline>{},
          )
          as Set<_i11.Polyline>);
}
