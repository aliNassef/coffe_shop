// Mocks generated by Mockito 5.4.6 from annotations
// in coffe_shop/test/features/home/presentation/controller/bloc/coffe_search_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:coffe_shop/core/helpers/failure.dart' as _i5;
import 'package:coffe_shop/features/home/data/model/coffe_model.dart' as _i6;
import 'package:coffe_shop/features/home/data/repo/home_repo.dart' as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [HomeRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepo extends _i1.Mock implements _i3.HomeRepo {
  MockHomeRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.CoffeeModel>>> getAllCoffees() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCoffees, []),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, List<_i6.CoffeeModel>>
                >.value(
                  _FakeEither_0<_i5.Failure, List<_i6.CoffeeModel>>(
                    this,
                    Invocation.method(#getAllCoffees, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.CoffeeModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.CoffeeModel>>> searchOnCoffees(
    String? query,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#searchOnCoffees, [query]),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, List<_i6.CoffeeModel>>
                >.value(
                  _FakeEither_0<_i5.Failure, List<_i6.CoffeeModel>>(
                    this,
                    Invocation.method(#searchOnCoffees, [query]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.CoffeeModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.CoffeeModel?>> getCoffeeById(
    String? id,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCoffeeById, [id]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.CoffeeModel?>>.value(
                  _FakeEither_0<_i5.Failure, _i6.CoffeeModel?>(
                    this,
                    Invocation.method(#getCoffeeById, [id]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.CoffeeModel?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> getUserLocation() =>
      (super.noSuchMethod(
            Invocation.method(#getUserLocation, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
              _FakeEither_0<_i5.Failure, String>(
                this,
                Invocation.method(#getUserLocation, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, String>>);
}
